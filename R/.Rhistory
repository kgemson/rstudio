library(igraph)
library(readr)
library(extrafont)
# set working directory
setwd("D:\\Users\\kgems\\Documents\\NPA\\R\\") # windows
movies <- read_csv("movies.csv")
actors <- read_csv("actors.csv")
head(movies,16)
head(actors)
actorNetwork <- graph_from_data_frame(d=movies, vertices=actors,directed=F)
E(actorNetwork)$color <- ifelse(E(actorNetwork)$Movie == "Forest Gump","green",
ifelse(E(actorNetwork)$Movie == "Apollo 13","black","orange"))
#plot(actorNetwork)
#help("plot")
loadfonts(device = "win")
plot(actorNetwork, vertex.color="Red", vertex.frame.color = "Blue", vertex.size = 19, vertex.label.family = "Courier New")
plot(actorNetwork, vertex.color="Red", vertex.frame.color = "Blue", vertex.size = 19, vertex.label.family = "Arial")
plot(actorNetwork, vertex.color="Red", vertex.frame.color = "Blue", vertex.size = 19, vertex.label.family = "Arial", edge.width=2)
plot(actorNetwork, vertex.color="Red", vertex.frame.color = "Blue", vertex.size = 19, vertex.label.family = "Arial", edge.width=2, edge.lty=2)
plot(actorNetwork, vertex.color="Red", vertex.frame.color = "Blue", vertex.size = 19, vertex.label.family = "Arial", edge.width=2, edge.lty=2)
plot(actorNetwork, vertex.color="Red", vertex.frame.color = "Blue", vertex.size = 19, vertex.label.family = "Arial", edge.width=2, edge.lty=2)
mtcarsgear <- table(mtcars$gear)
mtcarsgear
histogram <- ggplot(data=iris, aes(x=Petal.Width))
install ggplot2
install.packages("ggplot2")
histogram + geom_histogram(binwidth=0.2, aes(fill=Species))
library(ggplot2)
histogram <- ggplot(data=iris, aes(x=Petal.Width))
histogram
histogram + geom_histogram(binwidth=0.2, aes(fill=Species))
histogram + geom_histogram(binwidth=0.2, color="black",aes(fill=Species))
histogram + geom_histogram(binwidth=0.2, color="black",aes(fill=Species)) +
xlab("Petal Width") + ylab("Frequency") + ggtitle("Histogram of Petal Width")
histogram + geom_histogram(binwidth=0.5, color="red",aes(fill=Species)) +
xlab("Petal Width") + ylab("Frequency") + ggtitle("Histogram of Petal Width")
iris[sample(nrow(iris),10),]
iris[sample(nrow(iris),10),1]
iris[sample(nrow(iris),10),2]
iris[sample(nrow(iris),10),5]
## Load package
library(igraph)
## Load package
library(igraph)
library(readr)
library(extrafont)
# set working directory
setwd("D:\\Users\\kgems\\Documents\\NPA\\R\\") # windows
movies <- read_csv("movies.csv")
actors <- read_csv("actors.csv")
head(movies,16)
head(actors)
actorNetwork <- graph_from_data_frame(d=movies, vertices=actors,directed=F)
E(actorNetwork)$color <- ifelse(E(actorNetwork)$Movie == "Forest Gump","green",
ifelse(E(actorNetwork)$Movie == "Apollo 13","black","orange"))
#plot(actorNetwork)
#help("plot")
plot(actorNetwork)
head(movies,16)
head(actors)
plot(actorNetwork, vertex.color="Red", vertex.frame.color = "Blue",
vertex.size = 19, vertex.label.family = "Arial", edge.width=2, edge.lty=2)
plot(actorNetwork, vertex.color="Red", vertex.frame.color = "Blue",
vertex.size = 19, vertex.label.family = "Arial", edge.width=2, edge.lty=2)
plot(actorNetwork, vertex.color="Red", vertex.frame.color = "Blue",
vertex.size = 19, vertex.label.family = "Arial", edge.width=2, edge.lty=2)
plot(actorNetwork, vertex.color="Red", vertex.frame.color = "Blue",
vertex.size = 19, vertex.label.family = "Arial", edge.width=2, edge.lty=2)
plot(actorNetwork, vertex.color="Red", vertex.frame.color = "Blue",
vertex.size = 19, vertex.label.family = "Arial", edge.width=2, edge.lty=2)
plot(actorNetwork, vertex.color="Red", vertex.frame.color = "Blue",
vertex.size = 19, vertex.label.family = "Arial", edge.width=2, edge.lty=2)
wordcloud(words = d$word, freq = d$freq, min.freq = 5,max.words=120, random.order=FALSE, rot.per=0.5,colors=brewer.pal(8, "Dark2"))
library("tm")
library("SnowballC")
library("wordcloud")
library("wordcloud2")
library("RColorBrewer")
wordcloud(words = d$word, freq = d$freq, min.freq = 5,max.words=120, random.order=FALSE, rot.per=0.5,colors=brewer.pal(8, "Dark2"))
library("tm")
library("SnowballC")
library("wordcloud")
library("wordcloud2")
library("RColorBrewer")
text <- readLines("D:\\users\\kgems\\Documents\\NPA\\r\\starwars.txt")
docs <- Corpus(VectorSource(text))
# Convert the text to lowercase
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# specify your to remove stop words as a character vector
#docs <- tm_map(docs, removeWords, c("the", "this", "said", "like", "now", "went","come", "and", "Was", "for", "with", "from", "are", "which", "has", "Were", "that"))
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove punctuation
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemming
#docs <- tm_map(docs, stemDocument)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
findFreqTerms(dtm, lowfreq = 4)
barplot(d[1:10,]$freq, las = 2, names.arg = d[1:10,]$word,
col ="lightgreen", main ="Most frequent words",
ylab = "Word frequencies")
# Example 1 - Wordcloud 2 with demo word collection
wordcloud2(demoFreq, color = "random-light", backgroundColor = "grey")
# Example 2 - Basic cloud with our words
wordcloud(words = d$word, rot.per=.5, max.words = 100,min.freq = 5, scale=c(2,.25))
# Example 3 - Improved cloud with colour palette
wordcloud(words = d$word, freq = d$freq, min.freq = 5,max.words=120, random.order=FALSE, rot.per=0.5,colors=brewer.pal(8, "Dark2"))
#wordcloud2(data=d, size=1.6, color='random-dark')
text <- readLines("D:\\users\\kgems\\Documents\\NPA\\r\\scotland.txt")
# Remove punctuation
docs <- tm_map(docs, removePunctuation)
text <- readLines("D:\\users\\kgems\\Documents\\NPA\\r\\scotland.txt")
docs <- Corpus(VectorSource(text))
# Convert the text to lowercase
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# specify your to remove stop words as a character vector
#docs <- tm_map(docs, removeWords, c("the", "this", "said", "like", "now", "went","come", "and", "Was", "for", "with", "from", "are", "which", "has", "Were", "that"))
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove punctuation
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemming
#docs <- tm_map(docs, stemDocument)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
findFreqTerms(dtm, lowfreq = 4)
barplot(d[1:10,]$freq, las = 2, names.arg = d[1:10,]$word,
col ="lightgreen", main ="Most frequent words",
ylab = "Word frequencies")
# Example 1 - Wordcloud 2 with demo word collection
wordcloud2(demoFreq, color = "random-light", backgroundColor = "grey")
# Example 2 - Basic cloud with our words
wordcloud(words = d$word, rot.per=.5, max.words = 100,min.freq = 5, scale=c(2,.25))
# Example 3 - Improved cloud with colour palette
wordcloud(words = d$word, freq = d$freq, min.freq = 5,max.words=120, random.order=FALSE, rot.per=0.5,colors=brewer.pal(8, "Dark2"))
#wordcloud2(data=d, size=1.6, color='random-dark')
text <- readLines("D:\\users\\kgems\\Documents\\NPA\\r\\scotland.txt")
docs <- Corpus(VectorSource(text))
# Convert the text to lowercase
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# specify your to remove stop words as a character vector
#docs <- tm_map(docs, removeWords, c("the", "this", "said", "like", "now", "went","come", "and", "Was", "for", "with", "from", "are", "which", "has", "Were", "that"))
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove punctuation
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemming
docs <- tm_map(docs, stemDocument)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
findFreqTerms(dtm, lowfreq = 4)
barplot(d[1:10,]$freq, las = 2, names.arg = d[1:10,]$word,
col ="lightgreen", main ="Most frequent words",
ylab = "Word frequencies")
# Example 1 - Wordcloud 2 with demo word collection
wordcloud2(demoFreq, color = "random-light", backgroundColor = "grey")
# Example 2 - Basic cloud with our words
wordcloud(words = d$word, rot.per=.5, max.words = 100,min.freq = 5, scale=c(2,.25))
# Example 3 - Improved cloud with colour palette
wordcloud(words = d$word, freq = d$freq, min.freq = 5,max.words=120, random.order=FALSE, rot.per=0.5,colors=brewer.pal(8, "Dark2"))
#wordcloud2(data=d, size=1.6, color='random-dark')
# Example 3 - Improved cloud with colour palette
wordcloud(words = d$word, freq = d$freq, min.freq = 5,max.words=120, random.order=FALSE, rot.per=0.5,colors=brewer.pal(8, "Dark2"))
text <- readLines("D:\\users\\kgems\\Documents\\NPA\\r\\starwars.txt")
docs <- Corpus(VectorSource(text))
# Convert the text to lowercase
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# specify your to remove stop words as a character vector
#docs <- tm_map(docs, removeWords, c("the", "this", "said", "like", "now", "went","come", "and", "Was", "for", "with", "from", "are", "which", "has", "Were", "that"))
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove punctuation
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemming
docs <- tm_map(docs, stemDocument)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
findFreqTerms(dtm, lowfreq = 4)
barplot(d[1:10,]$freq, las = 2, names.arg = d[1:10,]$word,
col ="lightgreen", main ="Most frequent words",
ylab = "Word frequencies")
# Example 1 - Wordcloud 2 with demo word collection
#wordcloud2(demoFreq, color = "random-light", backgroundColor = "grey")
# Example 2 - Basic cloud with our words
#wordcloud(words = d$word, rot.per=.5, max.words = 100,min.freq = 5, scale=c(2,.25))
# Example 3 - Improved cloud with colour palette
wordcloud(words = d$word, freq = d$freq, min.freq = 5,max.words=120, random.order=FALSE, rot.per=0.5,colors=brewer.pal(8, "Dark2"))
#wordcloud2(data=d, size=1.6, color='random-dark')
# Example 3 - Improved cloud with colour palette
#wordcloud(words = d$word, freq = d$freq, min.freq = 5,max.words=120, random.order=FALSE, rot.per=0.5,colors=brewer.pal(8, "Dark2"))
wordcloud2(data=d, size=1.6, color='random-dark')
text <- readLines("D:\\users\\kgems\\Documents\\NPA\\r\\starwars.txt")
docs <- Corpus(VectorSource(text))
# Convert the text to lowercase
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# specify your to remove stop words as a character vector
#docs <- tm_map(docs, removeWords, c("the", "this", "said", "like", "now", "went","come", "and", "Was", "for", "with", "from", "are", "which", "has", "Were", "that"))
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove punctuation
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemming
#docs <- tm_map(docs, stemDocument)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
findFreqTerms(dtm, lowfreq = 4)
barplot(d[1:10,]$freq, las = 2, names.arg = d[1:10,]$word,
col ="lightgreen", main ="Most frequent words",
ylab = "Word frequencies")
# Example 1 - Wordcloud 2 with demo word collection
#wordcloud2(demoFreq, color = "random-light", backgroundColor = "grey")
# Example 2 - Basic cloud with our words
#wordcloud(words = d$word, rot.per=.5, max.words = 100,min.freq = 5, scale=c(2,.25))
# Example 3 - Improved cloud with colour palette
#wordcloud(words = d$word, freq = d$freq, min.freq = 5,max.words=120, random.order=FALSE, rot.per=0.5,colors=brewer.pal(8, "Dark2"))
wordcloud2(data=d, size=1.6, color='random-dark')
# Example 3 - Improved cloud with colour palette
#wordcloud(words = d$word, freq = d$freq, min.freq = 5,max.words=120, random.order=FALSE, rot.per=0.5,colors=brewer.pal(8, "Dark2"))
wordcloud2(data=d, size=1.6, color='random-dark',backgroundColor = "black"))
# Example 3 - Improved cloud with colour palette
#wordcloud(words = d$word, freq = d$freq, min.freq = 5,max.words=120, random.order=FALSE, rot.per=0.5,colors=brewer.pal(8, "Dark2"))
wordcloud2(data=d, size=1.6, color='random-dark', backgroundColor = "black")
View(X100_sales_records)
library(readr)
X100_sales_records <- read_csv("100_sales_records.csv")
View(X100_sales_records)
typeof(X100_sales_records)
class(X100_sales_records)
str(X100_sales_records) #shows the structure of the dataframe
# use '$' operatore to select a column from this dataframe
barplot(X100_Sales_Records$`Unit Cost`)
library(readr)
# use '$' operatore to select a column from this dataframe
barplot(X100_sales_records$`Unit Cost`)
summary(X100_sales_records$'Unit Cost')
mean(X100_sales_records$'Unit Cost')
# Use the class() function to determine the data type of the variables in the
# Unit Price column,
class(X100_sales_records$'Unit Cost')
# check the type of the variables in the Region column
type(X100_sales_records$'Region')
# check the type of the variables in the Region column
typeof(X100_sales_records$'Region')
# use the length() function to check the number of entries in the column
length(X100_sales_records$'Region')
# Subset the data to extract only specific parts of the dataset
# to do this we use square brackets, extract all of the sales from
# the Asia region can work out the mean:
mean(X100_sales_records$'Unit Price' [X100_sales_records$Region == 'Asia'])
# attach the dataset into R’s memory so we can just call the columns
# without the full dataset
attach(X100_Sales_Records)
# attach the dataset into R’s memory so we can just call the columns
# without the full dataset
attach(X100_sales_records)
$'Region'
'Region''
'Region'
'Region'
Region
Ship Date
'Ship Date'
$'Ship Date'
"Ship Date"
help(attach)
`Unit Price`
Unit.Price
# note - not advised to use 'attach': it imports a static version of the dataset, so
# any changes are not reflected on the 'attached' version
# need to remember to 'detach' it.
detach(X100_sales_records)
# try using 'with' instead
with(X100_sales_records, mean(`Unit Price`))
with(X100_sales_records, Region == 'Europe')
with(X100_sales_records[Region == 'Europe'], mean(`Unit Price`))
with(X100_sales_records, `Unit Price`[Region == 'Europe'])
mean(with(X100_sales_records, `Unit Price`[Region == 'Europe']))
# Create a new variable with only the European sales records.
# We need to add the comma at the end of the square brackets to
# tell R to include all rows
european_records = X100_sales_records[Region == 'Europe',]
# Create a new variable with only the European sales records.
# We need to add the comma at the end of the square brackets to
# tell R to include all rows
european_records = X100_sales_records[`Region` == 'Europe',]
# Create a new variable with only the European sales records.
# We need to add the comma at the end of the square brackets to
# tell R to include all rows
european_records = with(X100_sales_records[`Region` == 'Europe',])
# Create a new variable with only the European sales records.
# We need to add the comma at the end of the square brackets to
# tell R to include all rows
european_records = with(X100_sales_records, *[Region == 'Europe',])
attach(X100_sales_records)
[Region == 'Europe',]
Region == 'Europe',
`Unit Price`
`Unit Price`[Region == 'Europe',]
`Unit Price`[Region == 'Europe']
help("attach")
# Create a new variable with only the European sales records.
# We need to add the comma at the end of the square brackets to
# tell R to include all rows
european_sales = X100_sales_records[x100sales_records$Region == "Europe" ,]
# Create a new variable with only the European sales records.
# We need to add the comma at the end of the square brackets to
# tell R to include all rows
european_sales = X100_sales_records[X100sales_records$Region == "Europe" ,]
# Create a new variable with only the European sales records.
# We need to add the comma at the end of the square brackets to
# tell R to include all rows
european_sales = X100_sales_records[X100_sales_records$Region == "Europe" ,]
european_sales_high_priority = with(x100_sales_records, X100_sales_records[Region == "Europe"  & `Order Priority` == "H" , ]
european_sales_high_priority = with(x100_sales_records, X100_sales_records[Region == "Europe"  & `Order Priority` == "H" , ])
= with(x100_sales_records, X100_sales_records[Region == "Europe"  & `Order Priority` == "H" , ])
with(x100_sales_records, X100_sales_records[Region == "Europe"  & `Order Priority` == "H" , ])
with(X100_sales_records, X100_sales_records[Region == "Europe"  & `Order Priority` == "H" , ])
european_sales_high_priority = with(X100_sales_records, X100_sales_records[Region == "Europe"  & `Order Priority` == "H" , ])
# Now display columns 1 to 4 of the new variable and all rows
european_sales_high_priority[1:4 ,]
# Now display columns 1 to 4 of the new variable and all rows
european_sales_high_priority$Country
help(table)
# We can use the 'table' command to convert results to a table
asian_sales_priority <- with(X100_sales_records, X100_sales_records[Region == "Asia" & `Order
Priority` == "L" ,])
# We can use the 'table' command to convert results to a table
asian_sales_priority <- with(X100_sales_records, X100_sales_records[Region == "Asia" & `Order Priority` == "L" ,])
table(asian_sales_priority$Country)
# Now run the barplot to visualise the result
barplot(table(asian_sales_priority$Country))
library(readr)
df_group <- read_csv("group_scores.csv")
View(df_group)
attach(X100_sales_records)
european_sales_priority <- X100_sales_records[Region == "Europe"  & `Order Priority` == "L" , ]
View(european_sales_priority)
library(readr)
X100_sales_records <- read_csv("100_sales_records.csv")
View(X100_sales_records)
attach(X100_sales_records)
european_sales_priority <- X100_sales_records[Region == "Europe"  & `Order Priority` == "L" , ]
table
attach(X100_sales_records)
european_sales_priority <- X100_sales_records[Region == "Europe"  & `Order Priority` == "L" , ]
table(european_sales_priority)
table(european_sales_priority)
type(european_sales_priority)
View(european_sales_priority)
european_sales_priority <- X100_sales_records[Region == "Europe"  & `Order Priority` == "L" , ]
View(european_sales_priority)
View(european_sales_priority)
View(european_sales_priority)
View(european_sales_priority)
european_sales_priority <- X100_sales_records[Region == "Europe"  & `Order Priority` == "L" , ]
typeof(european_sales_priority)
table(european_sales_priority$Country)
# 1.14 With the table function, create a table using the whole csv file but only include the country
# and item type columns in the table, then create a barplot of this table.
table(X100_sales_records)
View(X100_sales_records)
# 1.14 With the table function, create a table using the whole csv file but only include the country
# and item type columns in the table, then create a barplot of this table.
table(X100_sales_records[2:3,])
table(X100_sales_records[2:3,])
# 1.14 With the table function, create a table using the whole csv file but only include the country
# and item type columns in the table, then create a barplot of this table.
mytable <- table(X100_sales_records[2:3,])
# Now display columns 1 to 4 of the new variable and all rows
european_sales_high_priority[1:4, ]
view(mytable)
print(mytable)
# 1.14 With the table function, create a table using the whole csv file but only include the country
# and item type columns in the table, then create a barplot of this table.
barplot(table(X100_sales_records[2:3,]))
# 1.14 With the table function, create a table using the whole csv file but only include the country
# and item type columns in the table, then create a barplot of this table.
X100_sales_records[2:3,1]
# 1.14 With the table function, create a table using the whole csv file but only include the country
# and item type columns in the table, then create a barplot of this table.
X100_sales_records[2:3,]
# 1.14 With the table function, create a table using the whole csv file but only include the country
# and item type columns in the table, then create a barplot of this table.
X100_sales_records[,2:3]
# 1.14 With the table function, create a table using the whole csv file but only include the country
# and item type columns in the table, then create a barplot of this table.
table(X100_sales_records[,2:3])
# 1.14 With the table function, create a table using the whole csv file but only include the country
# and item type columns in the table, then create a barplot of this table.
barplot(table(X100_sales_records[,2:3]))
table(X100_sales_records$Country,X100_sales_records$`Item Type`)
barplot(table(X100_sales_records$Country,X100_sales_records$`Item Type`))
attach(X100_sales_records)
european_sales_priority <- X100_sales_records[Region == "Europe"  & `Order Priority` == "L" , ]
table(european_sales_priority$Country)
plot(table(european_sales_priority$Country))
barplot(table(with(X100_sales_records,X100_sales_records[$Country,$`Item Type`])))
barplot(table(with(X100_sales_records,X100_sales_records[Country,`Item Type`])))
barplot(table(with(X100_sales_records,Country,`Item Type`)))
with(X100_sales_records,Country,`Item Type`)
with(X100_sales_records,Country)
with(X100_sales_records,Country `Item Type`)
View(X100_sales_records)
help("with")
with(X100_sales_records,(Country,`Item Type`))
X100_sales_records$Country
X100_sales_records$Country, X100_sales_records$`Item Type`
X100_sales_records[, c(`Country`, `Item Type`)]
X100_sales_records[, c("Country",`Item Type`)]
X100_sales_records[, c("Country")]
X100_sales_records[, c("Country","Country")]
X100_sales_records[, c("Country","Item Type")]
barplot(table(X100_sales_records[, c("Country","Item Type")]))
library(readr)
df_group <- read_csv("group_scores.csv")
View(df_group)
mean(df_group[[2]])
mean(df_group[[3]])
my_group_data = (as.numeric(df_group[1,]))
# to ignore 'NA' values from output, use 'rm' parameter
sum(my_group_data, na.rm = TRUE)
# or, remove them from dataset completely
my_group_data_new <- my_group_data[!is.na(my_group_data)]
# 3.1 Run the summary() function on my_group_data_new,then create a barplot of my_group_data_new.
# Change the colour of the chart:
barplot(my_group_data_new, col=“blue”)
# 3.1 Run the summary() function on my_group_data_new,then create a barplot of my_group_data_new.
# Change the colour of the chart:
barplot(my_group_data_new, col="blue")
# 3.2 - column names are element[0] within the dataframe
df_group[0 ,]
# 3.3 We can add this to the barplot command with the names.arg argument inside the barplot function:
barplot(my_group_data_new, names.arg = df_group[0 ,])
my_name_vector = df_group[0 ,]
View(my_name_vector)
my_name_vector[2]
my_name_vector[3]
my_name_vector[2:4]
my_name_vector[2][1]
# 3.6 Use 'colnames' function instead
barplot(my_group_data_new, col="gold1",names.arg=colnames(df_group[-1]))
help(colnames)
df_group[-1]
df_group[0]
df_group[1]
df_group[1,2]
df_group[1,]
df_group[,1]
df_group[,0]
df_group[0,]
df_group[-1]
df_group[,-1]
df_group[-1,]
